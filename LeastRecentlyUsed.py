'''
LRU算法：缓存淘汰策略（最近最少使用，选择最近最久未使用的页面予以淘汰。）
思路：我们去维护一个有序单向链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问的时候，我们从头开始顺序遍历链表。

1）如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。

2）如果此数据没有被缓存在链表中，又可以分为俩种情况：

3）如果此时缓存未满，则将此结点直接插入到链表的头部

4）如果此时缓存已满，则链表尾结点删除，将新的数据结点插入到链表的头部。

其他缓存算法：
FIFO--->先进先出      LFU---> 最少使用
'''



